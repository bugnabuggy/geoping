FORMAT: 1A
HOST: https://api.dev.geoping.info/

# GeoPing

In common, general posibility of this service is using of browser geopositioning and Google services (for PC and devices) 
for getting locations, adresses and determination of distance.

Service enables create checklists of point, where you (or any other person you want) may check in. Also you can make this list public
for everyone and watch, how many people go through that list and what is their opinion about it.

## Geolist collection [/api/geolist]

### Get all owned geolists [GET]

+ Attributes
    + Name (string) - Part of list`s name
    + DateCreatedFrom (string) - Start creation date in range
    + DateCreatedTo (string) - Last creation date in range
    + DateEditedFrom  (string) - Start editing date in range
    + DateEditedTo (string) - Last editing date in range
    + IsPublic (boolean) - State if list is public
    + OrderBy (string) - Key that says by what field should data be ordered and returned. They are: "name", "dateCreated", "dateEdited", "isPublic"
    + IsDesc (boolean) - State if should data be ordered by descending by chosen field
    + PageSize (number) - Page size
    + PageNumber (number) - Page number
    
+ Response 200 (application/json)

        {
            "totalItems": 4,
            "pageNumber": 0,
            "pageSize": null,
            "success": true,
            "messages": null,
            "data": [
                {
                "id": "81fa0020-79b4-4eca-2cbb-08d63e41e787",
                "name": "2323",
                "description": "Something",
                "ownerId": "6252da5d-3bdf-4aed-48e1-08d63e40e147",
                "created": "2018-10-30T08:30:09.7331955",
                "edited": "2018-10-30T11:49:05.2061244",
                "isPublic": false
                },
                {
                "id": "a64eeeb6-6ac0-4a90-d903-08d63e4a51e5",
                "name": "The is onew more list",
                "description": null,
                "ownerId": "6252da5d-3bdf-4aed-48e1-08d63e40e147",
                "created": "2018-10-30T09:30:24.1643948",
                "edited": "0001-01-01T00:00:00",
                "isPublic": false
                },
                {
                "id": "3c536def-7b1c-4927-aa08-08d63e4cb799",
                "name": "Test",
                "description": null,
                "ownerId": "6252da5d-3bdf-4aed-48e1-08d63e40e147",
                "created": "2018-10-30T10:40:34.9106833",
                "edited": "2018-10-30T11:26:57.4737233",
                "isPublic": false
                },
                {
                "id": "b4eced40-6768-4901-aa09-08d63e4cb799",
                "name": null,
                "description": "The list",
                "ownerId": "6252da5d-3bdf-4aed-48e1-08d63e40e147",
                "created": "2018-10-30T10:42:59.8369056",
                "edited": "2018-10-30T11:48:15.284905",
                "isPublic": false
                }
            ]
        }

### Get geolists user has access to them(owned lists and accepted shared lists) [GET /api/geolist/allowed]

+ Response 200 (application/json)

        {
            "totalItems": 4,
            "pageNumber": 0,
            "pageSize": null,
            "success": true,
            "messages": null,
            "data": [
                {
                "id": "81fa0020-79b4-4eca-2cbb-08d63e41e787",
                "name": "2323",
                "description": "Something",
                "ownerId": "6252da5d-3bdf-4aed-48e1-08d63e40e147",
                "created": "2018-10-30T08:30:09.7331955",
                "edited": "2018-10-30T11:49:05.2061244",
                "isPublic": false
                },
                {
                "id": "a64eeeb6-6ac0-4a90-d903-08d63e4a51e5",
                "name": "The is onew more list",
                "description": null,
                "ownerId": "6252da5d-3bdf-4aed-48e1-08d63e40e147",
                "created": "2018-10-30T09:30:24.1643948",
                "edited": "0001-01-01T00:00:00",
                "isPublic": false
                },
                {
                "id": "3c536def-7b1c-4927-aa08-08d63e4cb799",
                "name": "Test",
                "description": null,
                "ownerId": "2db0e95f-8835-4340-48e2-08d63e40e147",
                "created": "2018-10-30T10:40:34.9106833",
                "edited": "2018-10-30T11:26:57.4737233",
                "isPublic": false
                },
                {
                "id": "b4eced40-6768-4901-aa09-08d63e4cb799",
                "name": null,
                "description": "The list",
                "ownerId": "2db0e95f-8835-4340-48e2-08d63e40e147",
                "created": "2018-10-30T10:42:59.8369056",
                "edited": "2018-10-30T11:48:15.284905",
                "isPublic": false
                }
            ]
        }

### Get all public geolists [GET /api/geolist/public]

+ Attributes
    + Name (string) - Part of list`s name
    + DateCreatedFrom (string) - Start creation date in range
    + DateCreatedTo (string) - Last creation date in range
    + DateEditedFrom  (string) - Start editing date in range
    + DateEditedTo (string) - Last editing date in range
    + Author (string) - UserName of author
    + DatePublishFrom (string) - Start publish date in range
    + DatePublishTo (string) - Last publish date in range
    + RatingFrom (number) - Start rating number in range
    + RatingTo (number) - Last rating number in range
    + SubsFrom (number) - Start subscribers number in range
    + SubsTo (number) - Last subscribers number in range
    + FinishersFrom (number) - Start finishers number in range
    + FinishersTo (number) - Last finishers number in range
    + IsOfficial (boolean) - State is list official
    + OrderBy (string) - Key that says by what field should data be ordered and returned. They are: "name", "author", "dateCreated", "dateEdited", "datePublished", "rating", "subs", "finihers", "isOfficial", 
    + IsDesc (boolean) - State if should data be ordered by descending by chosen field
    + PageSize (number) - Page size
    + PageNumber (number) - Page number
    
+ Response 200 (application/json)

        {
            "totalItems": 3,
            "pageNumber": 0,
            "pageSize": null,
            "success": true,
            "messages": null,
            "data": [
                {
                    "id": "81fa0020-79b4-4eca-2cbb-08d63e41e787",
                    "name": "2323",
                    "description": "23423452",
                    "ownerId": "6252da5d-3bdf-4aed-48e1-08d63e40e147",
                    "ownerName": "testadmin",
                    "createDate": "2018-10-30T08:30:09.7331955",
                    "editDate": "2018-10-30T11:51:04.9346295",
                    "publishDate": "2018-10-30T08:30:10.0183629",
                    "rating": 0.0,
                    "subscribersNumber": 0,
                    "finishersNumber": 0,
                    "isOfficial": false
                },
                {
                    "id": "ac15cbab-2373-456b-aa05-08d63e4cb799",
                    "name": "The is onew more list of user",
                    "description": null,
                    "ownerId": "2db0e95f-8835-4340-48e2-08d63e40e147",
                    "ownerName": "testuser",
                    "createDate": "2018-10-30T09:47:40.2970114",
                    "editDate": "0001-01-01T00:00:00",
                    "publishDate": "2018-10-30T09:47:40.3179059",
                    "rating": 0.0,
                    "subscribersNumber": 0,
                    "finishersNumber": 0,
                    "isOfficial": false
                },
                {
                    "id": "29aada7e-e258-4931-aa06-08d63e4cb799",
                    "name": "The is onew more list of user",
                    "description": "NONE",
                    "ownerId": "2db0e95f-8835-4340-48e2-08d63e40e147",
                    "ownerName": "testuser",
                    "createDate": "2018-10-30T09:48:08.7829466",
                    "editDate": "0001-01-01T00:00:00",
                    "publishDate": "2018-10-30T09:48:08.8037131",
                    "rating": 0.0,
                    "subscribersNumber": 0,
                    "finishersNumber": 0,
                    "isOfficial": false
                }
            ]
        }

### Get all user`s public geolists [GET /api/geolist/public/{UserId}]

+ Parameters 
    + UserId (number) ... Id user-owner
    
+ Attributes
    + Name (string) - Part of list`s name
    + DateCreatedFrom (string) - Start creation date in range
    + DateCreatedTo (string) - Last creation date in range
    + DateEditedFrom  (string) - Start editing date in range
    + DateEditedTo (string) - Last editing date in range
    + Author (string) - UserName of author
    + DatePublishFrom (string) - Start publish date in range
    + DatePublishTo (string) - Last publish date in range
    + RatingFrom (number) - Start rating number in range
    + RatingTo (number) - Last rating number in range
    + SubsFrom (number) - Start subscribers number in range
    + SubsTo (number) - Last subscribers number in range
    + FinishersFrom (number) - Start finishers number in range
    + FinishersTo (number) - Last finishers number in range
    + IsOfficial (boolean) - State is list official
    + OrderBy (string) - Key that says by what field should data be ordered and returned. They are: "name", "author", "dateCreated", "dateEdited", "datePublished", "rating", "subs", "finihers", "isOfficial", 
    + IsDesc (boolean) - State if should data be ordered by descending by chosen field
    + PageSize (number) - Page size
    + PageNumber (number) - Page number
    
+ Response 200 (application/json)

        {
            "totalItems": 2,
            "pageNumber": 0,
            "pageSize": null,
            "success": true,
            "messages": null,
            "data": [
                {
                    "id": "ac15cbab-2373-456b-aa05-08d63e4cb799",
                    "name": "The is onew more list of user",
                    "description": null,
                    "ownerId": "2db0e95f-8835-4340-48e2-08d63e40e147",
                    "ownerName": "testuser",
                    "createDate": "2018-10-30T09:47:40.2970114",
                    "editDate": "0001-01-01T00:00:00",
                    "publishDate": "2018-10-30T09:47:40.3179059",
                    "rating": 0.0,
                    "subscribersNumber": 0,
                    "finishersNumber": 0,
                    "isOfficial": false
                },
                {
                    "id": "29aada7e-e258-4931-aa06-08d63e4cb799",
                    "name": "The is onew more list of user",
                    "description": "NONE",
                    "ownerId": "2db0e95f-8835-4340-48e2-08d63e40e147",
                    "ownerName": "testuser",
                    "createDate": "2018-10-30T09:48:08.7829466",
                    "editDate": "0001-01-01T00:00:00",
                    "publishDate": "2018-10-30T09:48:08.8037131",
                    "rating": 0.0,
                    "subscribersNumber": 0,
                    "finishersNumber": 0,
                    "isOfficial": false
                }
            ]
        }

### Get an certain geolist [GET /api/geolist/{Id}]

+ Parameters
    + Id (number) - Id of the list

+ Response 200 (application/json)

        {
            "id": "81fa0020-79b4-4eca-2cbb-08d63e41e787",
            "name": "2323",
            "description": "Something",
            "ownerId": "6252da5d-3bdf-4aed-48e1-08d63e40e147",
            "created": "2018-10-30T08:30:09.7331955",
            "edited": "2018-10-30T11:49:05.2061244",
            "isPublic": false
        }

### Create a new geolist [POST]

+ Request Create new geolist (application/json)

        {
            "Name": "The third list",
            "Description": "It is the third list"
            "IsPublic": true
        }

+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "Geolist was successfully added."
            ],
            "data": {
                "id": "29aada7e-e258-4931-aa06-08d63e4cb799",
                "name": "The third list",
                "description": "It is the third list",
                "ownerId": "2db0e95f-8835-4340-48e2-08d63e40e147",
                "created": "2018-10-30T09:48:08.7829466Z",
                "edited": "0001-01-01T00:00:00",
                "isPublic": true
            }
        }

### Edit an geolist [PUT /api/geolist/{Id}]

+ Parameters 
    + Id (number) ... Id of the list

+ Request Edit an existing geolist (application/json)

        {
            "Name": "The second list",
            "Description": "It is still the second list, but edited",
            "IsPublic": true
        }
        
+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "Geolist was successfully edited."
            ],
            "data": {
                "id": "81fa0020-79b4-4eca-2cbb-08d63e41e787",
                "name": "2323",
                "description": "23423452",
                "ownerId": "6252da5d-3bdf-4aed-48e1-08d63e40e147",
                "created": "2018-10-30T08:30:09.7331955",
                "edited": "2018-10-30T11:51:04.9346295Z",
                "isPublic": true
            }
        }

### Remove a collection of geolists [DELETE /api/geolist/?{Ids}]

+ Parameters 
    + Ids (string) - Id-s of the lists to be deleted

+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "There are no geolist with given geolistId = [b4eced40-6768-4901-aa09-08d63e4cb799]",
                "Given geolistId = [142352612362] is not valid",
                "Given geolistId = [dfhe4524y] is not valid",
                "There are no geolist with given geolistId = [81fa0020-79b4-4eca-2cbb-08d63e41e787]",
                "Geolist with Id = [17c13605-e914-4d87-e5a9-08d63e636a9d] was successfully removed."
            ],
            "data": null
        }

### Remove an certain geolist [DELETE /api/geolist/{Id}]

+ Parameter
    + Id (number) - Id of the list 
    
+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "Geolist with Id = [81fa0020-79b4-4eca-2cbb-08d63e41e787] was successfully removed."
            ],
            "data": null
        }
    
        
## Geopoints collection [/api/geolist/{ListId}/geopoint]

### List all geopoints of geolist [GET]
+ Attributes
    + Name (string) - Part of point`s name
    + OnAddress (string) - 
    + OrderBy (string) - Key that says by what field should data be ordered and returned. They are: "name", ... and that`s all
    + IsDesc (boolean) - State if should data be ordered by descending by chosen field
    + PageSize (number) - Page size
    + PageNumber (number) - Page number

+ Parameters 
    + ListId (number) - Id of list with geopoints
    
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "The first point",
                "description": "It is the first point",
                "latitude": 73.370371,
                "longitude": 54.991512,
                "radius": 5.0,
                "geoListId": 4,
                "geoList": null,
                "userPoints": null
            }
        ]

### Get an certain geopoint of geolist [GET /api/geolist/{ListId}/geopoint/{Id}]

+ Parameters
    + ListId (number) - Id of list with geopoints
    + Id (number) - Id of the point

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "The first point",
                "description": "It is the first point",
                "latitude": 73.370371,
                "longitude": 54.991512,
                "radius": 5.0,
                "geoListId": 4,
                "geoList": null,
                "userPoints": null
            }
        ]

### Create a new geopoint [POST]
+ Parameters
    + ListId (number) - Id of list with geopoints

+ Attributes
    + Name (string, required) - Name of list. Max length is 100 chars. 
    + Description (string) - Description of list. Max length is 240 chars.
    + Longitude (string, required) - Longitude of point`s coordinates.
    + Latitude (string, required) - Latitude of point`s coordinates.
    + Radius (number, required) - Accessible radius of point in meters to check in.
    
+ Request Create new geolist (application/json)

        {
            "Name": "The  point",
            "Description": "It is the first point",
            "Longitude": 54.991512,
            "Latitude": 73.370371,
            "Radius": 5
        }

+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "Geopoint was successfully added."
            ],
            "data": {
                "id": 2,
                "name": "The second point",
                "description": "It is the second point",
                "latitude": 73.370371,
                "longitude": 54.991512,
                "radius": 5.0,
                "geoListId": 1,
                "geoList": null,
                "userPoints": null
            }
        }

### Edit an geopoint [PUT /api/geolist/{ListId}/geopoint/{Id}]

+ Attributes
    + Name (string, required) - Name of list. Max length is 100 chars. 
    + Description (string) - Description of list. Max length is 240 chars.
    + Longitude (string, required) - Longitude of point`s coordinates.
    + Latitude (string, required) - Latitude of point`s coordinates.
    + Radius (number, required) - Accessible radius of point in meters to check in.
    
+ Parameters
    + ListId (number) - Id of list with geopoints
    + Id (number) - Id of the point

+ Request Edit an existing geolist (application/json)

        {
            "id": 1,
            "Name": "The first point",
            "Description": "It is the first point, but it`s edited",
            "Longitude": 60.991512,
            "Latitude": 73.370371,
            "Radius": 10
        }
        
+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "Geopoint was successfully edited."
            ],
            "data": {
                "id": 1,
                "name": "The first point",
                "description": "It is the first point, but it`s edited",
                "latitude": 73.370371,
                "longitude": 60.991512,
                "radius": 10.0,
                "geoListId": 1,
                "geoList": null,
                "userPoints": null
            }
        }

### Remove a collection of geopoints [DELETE /api/geolist/{ListId}/geopoint/?{Ids}]

+ Parameters
    + ListId (number) - Id of list with geopoints
    + Ids (string) - Id-s of the geopoints to be deleted

+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "Geopoints with Id-s = [1,2] was removed"
            ],
            "data": "1,2"
        }

### Remove an certain geopoint [DELETE /api/geolist/{ListId}/geopoint/{Id}]

+ Parameters
    + ListId (number) - Id of list with geopoints
    + Id (number) - Id of the point
    
+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "Geopoint was successfully removed."
            ],
            "data": {
                "id": 1,
                "name": "The first point",
                "description": "It is the first point, but it`s edited",
                "latitude": 73.370371,
                "longitude": 60.991512,
                "radius": 10.0,
                "geoListId": 1,
                "geoList": null,
                "userPoints": null
            }
        }
        
### Check in at given geopoint [PUT /api/geolist/{ListId}/geopoint/{Id}/check]

+ Parameters
    + ListId (number) - Id of list with geopoints
    + Id (number) - Id of the point

+ Request (application/json)

        {
            "id": 1,
            "Name": "The first point",
            "Description": "It is the first point, but it`s edited",
            "Longitude": 60.991512,
            "Latitude": 73.370371,
            "Radius": 10
        }
        
+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "Geopoint with Id = [1] was successfully checked in by user with Id = [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]"
            ],
            "data": {
                "pointId": 1,
                "point": null,
                "userId": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                "user": null,
                "checkTime": "2018-10-09T15:39:34.4816628+06:00"
            }
        }
      
        
## Check in [/api/geolist/{ListId}/check]

### Get all checks in for user and given list [GET]

+ Parameters
    + ListId (string) - Id of the list - storage of points
    
+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "User checked in points of list with Id = [94d37c96-24e2-465f-14b9-08d63ff65be1]"
            ],
            "data": [
                {
                    "id": "ff04b42f-e6a7-4c07-924c-08d63ff6c4e1",
                    "userId": "346df0c8-d73d-4157-0cd1-08d63ff494d4",
                    "pointId": "8dd803ae-43e5-4f59-fae1-08d63ff69767",
                    "latitude": null,
                    "longitude": "465468",
                    "distance": 10,
                    "date": "2018-11-01T12:37:21.7089199",
                    "deviceId": "00000000-0000-0000-0000-000000000000",
                    "ip": null,
                    "userAgent": null
                },
                {
                    "id": "1c65f215-66fc-46ca-924d-08d63ff6c4e1",
                    "userId": "346df0c8-d73d-4157-0cd1-08d63ff494d4",
                    "pointId": "810f6cff-6687-48a4-fae2-08d63ff69767",
                    "latitude": null,
                    "longitude": "465468",
                    "distance": 10,
                    "date": "2018-11-01T12:42:04.7054003",
                    "deviceId": "00000000-0000-0000-0000-000000000000",
                    "ip": null,
                    "userAgent": null
                }
            ]
        }
    
### Get check in for user and given point [GET /api/geolist/{ListId}/geopoint/{PointId}/check]

+ Parameters
    + ListId (string) - Id of the list - storage of points
    + PointId (string) - Id of the point
    
+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "User checked in point with Id = [8dd803ae-43e5-4f59-fae1-08d63ff69767]"
            ],
            "data": {
                "id": "ff04b42f-e6a7-4c07-924c-08d63ff6c4e1",
                "userId": "346df0c8-d73d-4157-0cd1-08d63ff494d4",
                "pointId": "8dd803ae-43e5-4f59-fae1-08d63ff69767",
                "latitude": null,
                "longitude": "465468",
                "distance": 10,
                "date": "2018-11-01T12:37:21.7089199",
                "deviceId": "00000000-0000-0000-0000-000000000000",
                "ip": null,
                "userAgent": null
            }
        }
    
### Add check in for user and given point [POST /api/geolist/{ListId}/geopoint/{PointId}/check]

+ Parameters
    + ListId (string) - Id of the list - storage of points
    + PointId (string) - Id of the point
    
+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "User was successfully checked in point with id = [810f6cff-6687-48a4-fae2-08d63ff69767]"
            ],
            "data": {
                "id": "1c65f215-66fc-46ca-924d-08d63ff6c4e1",
                "userId": "346df0c8-d73d-4157-0cd1-08d63ff494d4",
                "pointId": "810f6cff-6687-48a4-fae2-08d63ff69767",
                "latitude": null,
                "longitude": "465468",
                "distance": 10,
                "date": "2018-11-01T12:42:04.7054003Z",
                "deviceId": "00000000-0000-0000-0000-000000000000",
                "ip": null,
                "userAgent": null
            }
        }


## Sharing [/api/sharing]

### Get autocompleted list of users [GET /api/sharing/autocomplete?query={query}]

+ Attribute
    + query (string) - First part of user`s login or email 

+ Response 200

        [
            {
                "userName": "shefard3",
                "email": "shefard3r@test.com",
                "fullName": "Shef"
            },
            {
                "userName": "shefard55r",
                "email": "shefard55r@yandex.ru",
                "fullName": null
            },
            {
                "userName": "shefard2",
                "email": "shefard2r@test.com",
                "fullName": "Ard"
            },
            {
                "userName": "shefard1",
                "email": "shefard1r@test.com",
                "fullName": "Test"
            },
            {
                "userName": "alxshef",
                "email": "shefard@test.ru",
                "fullName": null
            }
        ]

### Get all of shared lists [GET]

+ Response 200

        [
            {
                "listId": "eb1ea9a4-09d0-4c93-3f4d-08d65116546e",
                "shareId": "1336c8c9-83c9-45d6-51ec-08d6511b033a",
                "listName": "The test list",
                "listDescription": "NONE",
                "listOwnerId": "f654fc54-272c-4c17-cde9-08d651153978",
                "listCreated": "2018-11-23T07:36:06.6488461",
                "listEdited": "0001-01-01T00:00:00",
                "listIsPublic": true,
                "shareStatus": "accepted",
                "shareInvitationDate": "2018-11-23T08:09:37.9248869"
            },
            {
                "listId": "b057c129-f266-40dd-94d3-aa558024c14d",
                "shareId": "1c65f215-66fc-46ca-924d-08d63ff6c4e1",
                "listName": "The second test list",
                "listDescription": "NONE",
                "listOwnerId": "f654fc54-272c-4c17-cde9-08d651153978",
                "listCreated": "2018-11-23T07:39:28.6488461",
                "listEdited": "0001-01-01T00:00:00",
                "listIsPublic": false,
                "shareStatus": "pending",
                "shareInvitationDate": "2018-11-01T12:42:04.7054003Z"
            }
        ]

### Get all of new shared lists [GET /api/sharing/new]

+ Response 200

        [
            {
                "listId": "b057c129-f266-40dd-94d3-aa558024c14d",
                "shareId": "1c65f215-66fc-46ca-924d-08d63ff6c4e1",
                "listName": "The second test list",
                "listDescription": "NONE",
                "listOwnerId": "f654fc54-272c-4c17-cde9-08d651153978",
                "listCreated": "2018-11-23T07:39:28.6488461",
                "listEdited": "0001-01-01T00:00:00",
                "listIsPublic": false,
                "shareStatus": "pending",
                "shareInvitationDate": "2018-11-01T12:42:04.7054003Z"
            }
        ]
        
### Get all of accepted shared lists [GET /api/sharing/accepted]

+ Response 200

        [
            {
                "listId": "eb1ea9a4-09d0-4c93-3f4d-08d65116546e",
                "shareId": "1336c8c9-83c9-45d6-51ec-08d6511b033a",
                "listName": "The test list",
                "listDescription": "NONE",
                "listOwnerId": "f654fc54-272c-4c17-cde9-08d651153978",
                "listCreated": "2018-11-23T07:36:06.6488461",
                "listEdited": "0001-01-01T00:00:00",
                "listIsPublic": true,
                "shareStatus": "accepted",
                "shareInvitationDate": "2018-11-23T08:09:37.9248869"
            }
        ]

### Revoke list sharing by owner-user [DELETE /api/sharing/{sharingId}]

+ Attributes
    + sharingId (string) - Id of list sharing record
    
+ Response 200

        {
            "success": true,
            "messages": [
                "You successfully revoke the sharing list."
            ],
            "data": null
        }

### Accept list sharing invite [POST /api/sharing/invitation/{sharingId}]

+ Attributes
    + sharingId (string) - Id of list sharing record
    
+ Response 200

        {
            "success": true,
            "messages": [
                "The share invite was accepted"
            ],
            "data": null
        }

### Refuse both list sharing invite and list sharing [DELETE /api/sharing/invitation/{sharingId}]

+ Attributes
    + sharingId (string) - Id of list sharing record
    
+ Response 200

        {
            "success": true,
            "messages": [
                "You successfully refuse the sharing list."
            ],
            "data": null
        }

### Invite users to share list [POST /api/sharing/{listId}]

+ Attributes
    + listId (string) - Id of list
    
+ Request

        [
            "testuser",
            "test@geoping.com",
            "crap@..craping.com"
        ]

+ Response 200

        {
            "success": true,
            "messages": [
                "The user [testuser@geoping.com] was invited.",
                "The user [test@geoping.com] was invited.",
                "The user [crap@..craping.com] hasn`t been invited. He hasn`t been found or data isn`t valid as email."
            ],
            "data": [
                "testuser@geoping.com",
                "test@geoping.com"
            ]
        }

### Get all of users, list was shared with [GET /api/sharing/{listId}/allowed-users]
    
+ Attributes
    + listId (string) - ID of list, you are going to get users list was shared with

+ Response 200

        [
            {
                "id" : "1336c8c9-83c9-45d6-51ec-08d6511b033a",
                "login" : "testuser",
                "firstName" : null,
                "lastName" : null,
                "sharingId" : "6252da5d-3bdf-4aed-48e1-08d63e40e147",
                "sharingDate" : "2018-10-30T09:48:08.7829466",
                "sharingStatus" : "accepted",
            },
            {
                "id" : "97ea3d31-18ab-4fb7-b1fa-b4f1515c8023",
                "login" : "test11",
                "firstName" : "test",
                "lastName" : "user",
                "sharingId" : "81fa0020-79b4-4eca-2cbb-08d63e41e787",
                "sharingDate" : "2018-10-30T09:47:40.3179059",
                "sharingStatus" : "pending",
            },
            {
                "id" : "62a4d629-a663-413f-9fb2-de335966a5bd",
                "login" : "tes323",
                "firstName" : null,
                "lastName" : null,
                "sharingId" : "a64eeeb6-6ac0-4a90-d903-08d63e4a51e5",
                "sharingDate" : "2018-10-30T09:47:40.2970114",
                "sharingStatus" : "invited",
            }
        ]


## Token processing [/api/token/{token}]

### Get info about token [GET]

+ Attributes
    + token (string) - Value of token, received by email
    
+ Response 200

        {
            "success": true,
            "messages": [
                "Following token was found"
            ],
            "data": {
                "tokenType": "SharingInvite",
                "userId": null
            }
        }

### Remove token [DELETE]

+ Attributes
    + token (string) - Value of token, received by email
    
+ Response 200

        {
            "success": true,
            "messages": [
                "Token is used now"
            ],
            "data": null
        }
 
 
## User and identity [/account]

### GeoPingUser class fields [GET]

+ Attributes 
    + Id (string) - User`s ID
    + FirstName (string) - User`s first name
    + LastName (string) - User`s last name
    + Email (string) - User`s email
    + Login (string) - User`s name
    + Birthday (string) - User`s birthday
    + PhoneNumber (string) - User`s phone number
    + AccountType (string) - User`s account type. It`s not specified now, but by default new user have "regular" type
    + LastPaid (string) - User`s date of last pay
    + IsActivated  - User`s account status. It`s useless now.
    + IdentityId (string) - Id of user`s identity
    
    
+ Response 404

### User registration [POST /account/register]

+ Request (application/json)

        {
            "UserName": "username",
            "Email": "username@gmail.com",
            "Password": "Password@123",
            "Token": "sometokenforsomepurpose"
        }
        
+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "User was successfully registered, now he should validate his account according instructions were sent to provided email address"
            ],
            "data": []
        }
        
### Change password [POST /account/change-password]

+ Request (application/json)

        {
            "OldPassword": "Password123",
            "NewPassword": "123Password",
        }
        
+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "Password was changed successfully" 
            ]
        }

### Password reset request[POST /account/reset-password]

+ Attributes
    + UserData (string) - User`s login or email
    
+ Request (application/json)

        {
            "UserData": "myemail@forgot.com"
        }
    
+ Response 200 (application/json)

        {
            "A password reset confirmation email has been sent to email address you specified"
        }

### Get profile [GET /account/profile]

+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "The following user was found"
            ],
            "data": {
                "id": "136B1014-7EE6-48F9-3645-08D63A3DE1B6",
                "firstname": null,
                "lastname": null,
                "email": "username@gmail.com",
                "login": "username",
                "birthday": "0001-01-01 00:00:00.0000000",
                "phonenumber": null,
                "accounttype": "regular",
                "lastpaid": "0001-01-01 00:00:00.0000000",
                "isactivated": false,
                "identityid": "b057c129-f266-40dd-94d3-aa558024c14d"
                "avatar" : "veryverylongstringthatrepresentstheusersavatar"
            }
        }

### Get username and avatar [GET /account/account/short]
+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "The following user was found"
            ],
            "data": {
                "username": "username",
                "avatar": "veryverylongstringthatrepresentstheusersavatar"
            }
        }

### Edit profile[PUT /account/profile]


+ Request (application/json)

        {
                "id": "136B1014-7EE6-48F9-3645-08D63A3DE1B6",
                "firstname": null,
                "lastname": null,
                "email": "username@gmail.com",
                "login": "username",
                "birthday": "0001-01-01 00:00:00.0000000",
                "phonenumber": null,
                "accounttype": "regular",
                "lastpaid": "0001-01-01 00:00:00.0000000",
                "isactivated": false,
                "identityid": "b057c129-f266-40dd-94d3-aa558024c14d", 
                "avatar" : "veryverylongstringthatrepresentstheusersavatar"
                
        }
        
+ Response 200 (application/json)

        {
                "id": "136B1014-7EE6-48F9-3645-08D63A3DE1B6",
                "firstname": "user",
                "lastname": "name",
                "email": "username@gmail.com",
                "login": "username",
                "birthday": "0001-01-01 00:00:00.0000000",
                "phonenumber": "+79001234567",
                "accounttype": "premium",
                "lastpaid": "2018-01-01 00:00:00.0000000",
                "isactivated": false,
                "identityid": "b057c129-f266-40dd-94d3-aa558024c14d"
                "avatar" : "veryverylongstringthatrepresentstheusersavatar"
        }

### Confirm email [GET /account/confirm-email?UserId={UserId}&Token={Token}]

+ Parameters
    + UserId (string) - Identity id of user
    + Token (string) - Token got by user to confirm his email

+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "User with Id = [{userId}] has been confirmed successfully"
            ],
            "data": []
        }
        
### Confirm password reset [POST /account/confirm-reset?UserId={UserId}&Token={Token}]

+ Parameters
    + UserId (string) - Identity id of user
    + Token (string) - Token got by user to confirm his email
    
+ Request (application/json)

        {
            "NewPassword" : "Password@123"
        }

+ Response 200 (application/json)

        {
            "success": true,
            "messages": [
                "User`s password with Id = [{userId}] has been reset successfully"
            ],
            "data": []
        }

### Getting JWT Bearer Token [POST /connect/token]

+ Attributes
    + Client_id (string, required) - Client ID
    + Client_secret (string) - Client secret
    + Grant_type (string, required) - Grand type = password
    + Username (string, required) - User name
    + Password (string, required) -  User password
    + Scope (string) -  Scope

+ Request (application/x-www-form-urlencoded)

+ Response 200 (application/json)

        {
            "access_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjM1ZGRiYTQwNjI1NmFjYzc3MjdhZWNiNTE2YTU4NjEwIiwidHlwIjoiSldUIn0.eyJuYmYiOjE1MzkwNzc2NTMsImV4cCI6MTUzOTA4MTI1MywiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIiwiYXVkIjpbImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9yZXNvdXJjZXMiLCJhcGkiXSwiY2xpZW50X2lkIjoiM0JBNDdENjREN0RBNUVGNCIsInN1YiI6Ijg1ZTI5NjM5LTRhMmItNGUyOC05N2M0LTIyNWIzYjk2MGM0MyIsImF1dGhfdGltZSI6MTUzOTA3NzY1MywiaWRwIjoibG9jYWwiLCJzY29wZSI6WyJhcGkiXSwiYW1yIjpbInB3ZCJdfQ.Boyd-dlJAeWYIOOemHQ-fZBKL8xfXRcR31IZgMOVR8pi6bsbZ9-M9mbaKNT9Tuo5m7uc10d3r-M3VHKBXjOWCkerKrR-lN7ANT7MB126KpGHkUzXRDuz-WNCe7MqSSnccueTSTku4Ui9kJ7o1tT1Z7FQxKsyNZ2sUJXl5Mwi2p72j9Hzb0QU7f9CCbTb36Xt-9sKi7ABFVRxN52b-BlFuQrSo9VNmHti7mkfhxFTheXcpOjFNz5uNBNA9OUcErBj58Jo-IiMYZuqkrIaPlb5vNQUCgLiHfeQEbddtCwd8yoUMbmgmRo2PH_FbMTKS5Hcue1zAZLlTjhOUYo6CJ44Lw",
            "expires_in": 3600,
            "token_type": "Bearer"
        }